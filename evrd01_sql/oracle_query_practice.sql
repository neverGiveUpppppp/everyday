
SELECT A.코드, A.이름, 동아리명
FROM 사원 A
    LEFT JOIN 동아리 B ON (A.CODE = B.CODE);

SELECT 과목이름, MIN(점수), MAX(점수)
FROM 성적
GROUP BY 과목이름
HAVING AVG(점수) >= 90;

SELECT 학과, COUNT(*) AS 학과별튜플수
FROM 학생
GROUP BY 학과;

SELECT * FROM 회원 
WHERE 이름 LIKE '이%'
ORDER BY 가입일순 DESC;

CREATE INDEX idx_name ON student(name);
SELECT 학번, 이름 FROM 학생 WHERE 학년 IN (3,4);
ALTER TABLE 학생 ADD 주소 VARCHAR2(20);
DELETE FROM 학생 WHERE 이름 = '민수';


----------

-- ANSI JOIN표준구문 + LIKE
-- WHERE 컬럼명 LIKE '%문자열%';
SELECT EMP_ID 사원번호, EMP_NAME 사원이름, PHONE 폰번호    
FROM EMPLOYEE EMP
    JOIN JOB J ON(EMP.JOB_CODE = J.JOB_CODE)
WHERE EMP_NAME LIKE '선%';

-- 오라클 구문 + LIKE
SELECT EMP_NAME, DEPT_CODE, SAL_LEVEL
FROM EMPLOYEE E,JOB J
WHERE E.JOB_CODE = J.JOB_CODE
    AND DEPT_CODE LIKE '%D9%';    

SELECT EMP_NAME, DEPT_CODE, SAL_LEVEL
FROM EMPLOYEE E
    JOIN JOB J ON(E.JOB_CODE = J.JOB_CODE)
WHERE DEPT_CODE LIKE '%D9%';    

-- LIKE : 1글자 와일드카드 _
SELECT EMP_ID, EMP_NAME, PHONE
FROM EMPLOYEE EM
    JOIN DEPARTMENT DEPT ON(EM.DEPT_CODE = DEPT.DEPT_ID)
WHERE PHONE LIKE '___3%';    

-- LIKE + ESCAPE ' '
SELECT EMP_ID 사번, EMP_NAME 사원명, EMP_NO 주번, DEPT_TITLE 부서명
FROM EMPLOYEE E
    JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
WHERE EMP_NO LIKE '______-%';-- ESCAPE '-';    

SELECT EMP_ID 사번, EMP_NAME 사원명, EMAIL 이메일, DEPT_TITLE 부서명
FROM EMPLOYEE E
    JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
WHERE EMAIL LIKE '___!_%' ESCAPE '!';    

SELECT EMP_ID 사번, EMP_NAME 사원명, EMAIL 이메일, DEPT_TITLE 부서명
FROM EMPLOYEE E
    JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
WHERE EMAIL LIKE '%__!_%' ESCAPE '!';   

SELECT EMP_ID 사번, EMP_NAME 사원명, EMAIL 이메일, DEPT_TITLE 부서명
FROM EMPLOYEE E
    JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
WHERE EMAIL LIKE '%__!_%' ESCAPE '!';   


-- 이메일 @앞 5글자 아이디 추츨하기
SELECT EMP_ID, EMP_NAME, EMAIL, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE E
    JOIN DEPARTMENT D ON(E.DEPT_CODE = D.DEPT_ID)
    JOIN LOCATION L ON(D.LOCATION_ID = L.LOCAL_CODE)
WHERE EMAIL LIKE '_____@@%' ESCAPE '@';
    
-- @로 이메일 계정 추려내기    
SELECT EMP_ID, EMP_NAME, EMAIL, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE E
    JOIN DEPARTMENT D ON(E.DEPT_CODE = D.DEPT_ID)
    JOIN LOCATION L ON(D.LOCATION_ID = L.LOCAL_CODE)
WHERE EMAIL LIKE '%_____@@%' ESCAPE '@';    

-----------


SELECT 과목이름, MIN(점수) AS 최소점수, MAX(점수) AS 최대점수
FROM 성적
GROUP BY 과목이름
HAVING AVG(점수) >= 90;

SELECT 학과, COUNT(*) AS 학과별튜플수 
FROM 학생
GROUP BY 학과;

CREATE INDEX IDX_NAME ON STUDENT(NAME);

SELECT 학번, 이름 FROM 학생
WHERE 학년 IN (3,4);

DELETE FROM 학생 WHERE 이름 = '민수';

-----------

SELECT 과목이름, 점수
FROM 성적;


SELECT 과목이름, MIN(점수) AS 최소점수, MAX(점수) AS 최대점수
FROM 성적
GROUP BY 과목이름
HAVING AVG(점수) >= 90;


ALTER TABLE 성적 ADD 이름 VARCHAR2(10);
INSERT INTO 성적 VALUES('테스트',100,'학생이름');
ALTER TABLE 성적 DROP COLUMN 이름 ;
DELETE FROM 성적 WHERE 과목이름 = '테스트';

CREATE TABLE 성적(
    과목이름 VARCHAR2(20),
    점수 NUMBER
);
INSERT INTO 성적 VALUES('컴퓨터구조',95);
INSERT INTO 성적 VALUES('컴퓨터구조',84);
INSERT INTO 성적 VALUES('데이터베이스',89);
INSERT INTO 성적 VALUES('인공지능',92);
INSERT INTO 성적 VALUES('데이터베이스',100);
INSERT INTO 성적 VALUES('데이터베이스',88);
INSERT INTO 성적 VALUES('인공지능',93);


----------------

SELECT 학과, 점수
FROM 학생
GROUP BY 학과;

SELECT 학과, MIN(점수)AS 최소점수, MAX(점수) AS 최대점수
FROM 학생
--GROUP BY 학과
GROUP BY 학과;
--GROUP BY 학과,점수;
HAVING AVG(점수) >= 90;

SELECT * FROM 학생;
ALTER TABLE 학생 DROP COLUMN 학과 CASCADE CONSTRAINT;
ALTER TABLE 학생 ADD 점수 NUMBER;
INSERT INTO 학생 VALUES('컴퓨터구조', 95);
INSERT INTO 학생 VALUES('컴퓨터구조', 84);
INSERT INTO 학생 VALUES('DB', 89);
INSERT INTO 학생 VALUES('인공지능', 92);
INSERT INTO 학생 VALUES('DB', 100);
INSERT INTO 학생 VALUES('DB', 88);
INSERT INTO 학생 VALUES('인공지능', 93);

DELETE FROM 학생; 
SELECT * FROM 학생;
---------

SELECT 학과, COUNT(학과) AS 학과별튜플수
FROM 학생
GROUP BY 학과;

CREATE TABLE 학생(
    학과 VARCHAR2(10)
);
INSERT INTO 학생 VALUES('전기');
INSERT INTO 학생 VALUES('컴퓨터');
INSERT INTO 학생 VALUES('전자');
INSERT INTO 학생 VALUES('전자');
INSERT INTO 학생 VALUES('컴퓨터');





-- INDEX
-- INDEX 생성 : CREATE INDEX 인덱스명 ON 테이블명(컬럼명)
-- INDEX 삭제 : DROP INDEX 인덱스명
CREATE INDEX ST_NM_ID ON STUDENT(NAME);
CREATE INDEX ST_NM_ID ON 부서(부서코드);


SELECT 직원명, 부서코드
FROM 직원
WHERE 직원코드 IN (1001,1002);


/*

 ALTER : 객체 수정
 컬럼 추가/삭제, 제약조건 추가/삭제, 컬럼 자료형 변경, 디폴트값 변경 & 테이블명/컬럼명/제약조건명 변경

1)ALTER 컬럼 추가, 수정,삭제
ALTER TABLE 테이블명 ADD 추가할컬럼명 데이터타입
ALTER TABLE 테이블명 MODIFY 수정할컬럼명 데이터타입          ※ 수정할려는 크기가 더 작으면 에러
ALTER TABLE 테이블명 DROP COLUMN 삭제할 컬럼명;

2)ALTER 제약조건 추가, 수정,삭제
ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 제약조건(컬럼명);
ALTER TABLE 테이블명 MODIFY 컬럼명 CONSTRAINT 제약조건명;
※ NOT NULL은 이미 NULL이 기본으로 있는 상태이기 때문에 ADD가 아닌 MODIFY로 수정해야함

*/
ALTER TABLE 직원 ADD 성별 VARCHAR2(1);
ALTER TABLE 부서 ADD 부서분류 VARCHAR2(20);
ALTER TABLE 직원 MODIFY 성별 VARCHAR2(10);
ALTER TABLE 직원 MODIFY 성별 NUMBER;
ALTER TABLE 직원 ADD TEST VARCHAR2(1);
ALTER TABLE 직원 DROP COLUMN TEST CASCADE CONSTRAINTS;
ALTER TABLE 직원 DROP COLUMN TEST CASCADE CONSTRAINTS;
ALTER TABLE 직원 ADD CONSTRAINT EMP_GEN_CK CHECK(성별 IN(1,2));
ALTER TABLE 직원 DROP CONSTRAINT EMP_GEN_CK;
ALTER TABLE 직원 MODIFY 성별 CONSTRAINT EMP_GEN_CK UNIQUE;
ALTER TABLE 직원 DROP CONSTRAINT EMP_GEN_CK;
ALTER TABLE 직원 ADD CONSTRAINT TEST1 CHECK(성별 IN (1,2));

CREATE TABLE 사무용품(
    SEQ NUMBER,
    NAME VARCHAR2(10)
);    
ALTER TABLE 사무용품 ADD 소유주 NUMBER;
ALTER TABLE 사무용품 ADD CONSTRAINT OFC_OWN_FK FOREIGN KEY(소유주) REFERENCES 직원(직원코드);
ALTER TABLE 사무용품 ADD CONSTRAINT OFC_SEQ_PK PRIMARY KEY(SEQ);
ALTER TABLE 사무용품 DROP COLUMN 소유주 CASCADE CONSTRAINTS;
ALTER TABLE 사무용품 MODIFY 소유주  CONSTRAINT OFC_OWN_NM NOT NULL;
ALTER TABLE 사무용품 ADD 소유주2 NUMBER; 
ALTER TABLE 사무용품 ADD CONSTRAINT OFC_OWN_NM2 unique(소유주2);
ALTER TABLE 사무용품 DROP COLUMN 소유주2 CASCADE CONSTRAINTS;
ALTER TABLE 사무용품 MODIFY 소유주 CONSTRAINT OFC_OWN_NM2 NULL;
---- ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 제약조건(컬럼명);
ALTER TABLE 사무용품 MODIFY 소유주 CONSTRAINT OFC_OWN_NM2 NOT NULL;

CREATE INDEX IDX_NAME ON 사무용품(소유주);
DROP INDEX IDX_NAME;

------

DELETE FROM 학생
WHERE 이름 = '민수';

------

CREATE TABLE 부서 (
부서코드 INT PRIMARY KEY, 
부서명 VARCHAR(20)
);
CREATE TABLE 직원 (
직원코드 INT PRIMARY KEY, 
부서코드 INT,
직원명 VARCHAR(20),
FOREIGN KEY(부서코드) REFERENCES 부서(부서코드)
ON DELETE CASCADE 
);
INSERT INTO 부서 VALUES(10, '영업부');
INSERT INTO 부서 VALUES(20, '기획부');
INSERT INTO 부서 VALUES(30, '개발부');
INSERT INTO 직원 VALUES(1001, 10, '이진수');
INSERT INTO 직원 VALUES(1002, 10, '곽연경');
INSERT INTO 직원 VALUES(1003, 20, '김선길');
INSERT INTO 직원 VALUES(1004, 20, '최민수');
INSERT INTO 직원 VALUES(1005, 20, '이용갑');
INSERT INTO 직원 VALUES(1006, 30, '박종일');
INSERT INTO 직원 VALUES(1007, 30, '박미경');

SELECT * FROM 직원; -- 튜플7
DELETE FROM 직원 WHERE 부서코드 = 20; -- 튜플3 삭제
SELECT * FROM 직원; -- 튜플4
SELECT DISTINCT COUNT(부서코드) FROM 직원;
SELECT COUNT(부서코드) FROM 직원;

---------------------------------------------
select * from tn_qna;

SELECT * FROM TC_CODE 
WHERE CODE_NM LIKE '%��';

SELECT * 
FROM TN_BBS_DOMN
WHERE BBS_CODE LIKE '%1002%';

SELECT DOMN_NM
FROM TN_DOMN
WHERE DOMN_NM LIKE '%com%';



