package com.prac.lambda;



/*
메소드
    int min(int x, int y) {
        return x < y ? x : y;
    }

람다 표현식
    (x, y) -> x < y ? x : y;

람다 사용 시,
클래스를 작성하고 객체를 생성하지 않아도 메소드를 사용가능
불필요한 코드↓, 코드 가독성↑

자바에서는 클래스의 선언과 동시에 객체를 생성하므로,
단 하나의 객체만을 생성할 수 있는 클래스를 익명 클래스라고 함
    ∴ 자바에서 람다 표현식은 익명 클래스와 동일


익명 클래스 예시
    new Object() {
        int min(int x, int y) {
            return x < y ? x : y;
        }
    }

람다 표현식
메소드의 매개변수로 전달될 수도, 메소드의 결괏값으로 반환될 수도 있음


문법
(매개변수목록) -> { 함수몸체 }


람다 표현식 사용 시, 유의사항
1. 매개변수의 타입을 추론할 수 있는 경우, 타입을 생략가능
2. 매개변수가 하나인 경우, 괄호() 생략가능
3. 함수의 몸체가 하나의 명령문만으로 이루어진 경우, 중괄호{} 생략가능. 이때 세미콜론(;)x
4. 함수의 몸체가 하나의 return문으로만 이루어진 경우, 중괄호{} 생략불가
5. return문 대신 표현식을 사용할 수 있으며, 이때 반환값은 표현식의 결괏값이 됩니다. 이때 세미콜론(;) X

 */

public class Lambda_TCPSchool {
    public void method01(){
// 익명클래스 방식과 람다 표현식의 비교
//    1)전통적인 방식(익명클래스)의 스레드 생성
        new Thread(new Runnable() {
            public void run() {
                System.out.println("전통적인 방식의 일회용 스레드 생성");
            }
        }).start();

//    2)람다 표현식을 사용한 스레드 생성
        new Thread(()->{
            System.out.println("람다 표현식을 사용한 일회용 스레드 생성");
        }).start();
    }

/*

함수형 인터페이스(functional interface)
    람다 표현식을 하나의 변수에 대입할 때 사용하는 참조 변수의 타입을 함수형 인터페이스
    추상 클래스와는 달리 추상 메소드 1개만 보유가능

    @FunctionalInterface
    이 어노테이션을 붙이면, 컴파일러는 해당 인터페이스를 함수형 인터페이스로 인식하고
    함수형 인터페이스에 두 개 이상의 메소드가 선언되면 오류를 발생시킴


 */





    public static void main(String[] args) {


    }


}
